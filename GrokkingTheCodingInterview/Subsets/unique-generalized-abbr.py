# Given a word, write a function to generate all of its unique 
# generalized abbreviations.

# Generalized abbreviation of a word can be generated by replacing 
# each substring of the word by the count of characters in the substring. 
# Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. 
# After replacing these substrings in the actual word by the count of 
# characters we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.

# Example:
# Input: "BAT"
# Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"

from collections import deque

class Abbreviation:
    def __init__(self, content, start_index, abbr_count):
        self.content = content
        self.start_index = start_index
        self.abbr_count = abbr_count

def generate_generalized_abbreviation(word):
    result = []
    queue = deque()
    queue.append(Abbreviation([], 0, 0))
    while queue:
        current = queue.popleft()
        if current.start_index == len(word):
            if current.abbr_count > 0:
                current.content.append(str(current.abbr_count))
            result.append("".join(current.content))
        else:
            queue.append(
                Abbreviation(list(current.content), current.start_index + 1, current.abbr_count + 1)
            )

            if current.abbr_count != 0:
                current.content.append(str(current.abbr_count))
            new_word = list(current.content)
            new_word.append(word[current.start_index])
            queue.append(
                Abbreviation(new_word, current.start_index + 1, 0)
            )
    return result

def generate_generalized_abbreviation_recursive(word):
    result = []
    recursive_call(word, list(), 0, 0, result)
    return result

def recursive_call(word, chars, start_index, abbr_count, result):
    if start_index == len(word):
        if abbr_count > 0:
            chars.append(str(abbr_count))
        result.append("".join(chars))
        return
    recursive_call(word, list(chars), start_index + 1, abbr_count + 1, result)
    if abbr_count > 0:
        chars.append(str(abbr_count))
    new_chars = list(chars)
    new_chars.append(word[start_index])
    recursive_call(word, new_chars, start_index + 1, 0, result)

def main():
    print("Generalized abbreviation are: " +
            str(generate_generalized_abbreviation_recursive("BAT")))
    print("Generalized abbreviation are: " +
            str(generate_generalized_abbreviation("code")))

main()